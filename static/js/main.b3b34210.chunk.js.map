{"version":3,"sources":["Chart.tsx","CountryPopulations.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CoronaChart","props","chartReference","React","createRef","data","labels","this","datasets","map","dataset","label","title","fill","lineTension","backgroundColor","borderColor","color","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","values","options","text","display","Component","countryPopulations","emptyDataPoint","new_daily_cases","new_daily_deaths","total_cases","total_recoveries","total_deaths","colors","cases","deaths","App","state","country","isNormalized","enableMultiple","match","params","countryCodes","split","loadCountries","getCountryCodes","urls","cc","Promise","all","u","fetch","then","responses","res","json","setState","length","xs","filter","x","isNumber","reduce","a","b","countryCode","value","population","dates","dateDataPoints","date","i","day","rollingDays","slice","Math","max","roll","rolling","f","rollingValues","d","round","average","normalize","rollingCases","cumulativeCases","rollingDeaths","cumulativeDeaths","timelineitem","countryInfo","dvs","dateValues","code","getNormalizeSuffix","dv","getDate","dayString","getMonth","getFullYear","toString","allDates","c","timelineitems","t","Object","keys","Date","flat","Array","from","Set","sort","getTime","toDateKey","allSets","createComparisonDataCharts","countrytimelinedata","info","createDataCharts","numberOfCharts","min","s","Container","AppBar","position","Toolbar","Box","mr","FormControl","InputLabel","id","Select","multiple","labelId","onChange","e","target","history","push","join","MenuItem","name","FormControlLabel","control","Checkbox","checked","Boolean","window","location","hostname","ReactDOM","render","StrictMode","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b3b34210.chunk.js","sourcesContent":["import React from 'react'\nimport { defaults, ChartComponentProps, Line } from 'react-chartjs-2'\n\nexport interface Dataset {\n    title: string,\n    values: number[],\n    color: string\n}\n\nexport interface CoronaChartProps {\n    title: string,\n    labels: string[],\n    datasets: Dataset[]\n}\n\nexport class CoronaChart extends React.Component<CoronaChartProps> {\n    chartReference: React.RefObject<unknown>\n    \n    constructor(props: CoronaChartProps) {\n        super(props)\n        this.chartReference = React.createRef()\n    }\n\n    render() {\n        const data = {\n            labels: this.props.labels,\n            datasets: this.props.datasets.map(dataset => ({\n                label: dataset.title,\n                fill: false,\n                lineTension: 0.01,\n                backgroundColor: 'rgba(75,192,192,0.4)',\n                borderColor: dataset.color,\n                borderCapStyle: 'butt',\n                borderDash: [],\n                borderDashOffset: 0.0,\n                borderJoinStyle: 'miter',\n                pointBorderColor: 'rgba(75,192,192,1)',\n                pointBackgroundColor: '#fff',\n                pointBorderWidth: 1,\n                pointHoverRadius: 5,\n                pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                pointHoverBorderColor: 'rgba(220,220,220,1)',\n                pointHoverBorderWidth: 2,\n                pointRadius: 0,\n                pointHitRadius: 10,\n                data: dataset.values\n            })),\n        }\n\n        const options = {\n            title: {\n                text: this.props.title,\n                display: true\n            },\n        }\n\n        return (<Line data={data} options={options}/>)\n    }\n}\n\n","export interface CountryPopulation {\n    size: number,\n    population: number\n}\n\nexport const countryPopulations: {[index:string]: CountryPopulation} = \n{\n    \"AF\": {\n        \"size\": 645807,\n        \"population\": 38928346\n    },\n    \"AX\": {\n        \"size\": 1580,\n        \"population\": 29789\n    },\n    \"AL\": {\n        \"size\": 28748,\n        \"population\": 2877797\n    },\n    \"DZ\": {\n        \"size\": 2381741,\n        \"population\": 43851044\n    },\n    \"AS\": {\n        \"size\": 197,\n        \"population\": 55191\n    },\n    \"AD\": {\n        \"size\": 464,\n        \"population\": 77265\n    },\n    \"AO\": {\n        \"size\": 1246700,\n        \"population\": 31787566\n    },\n    \"AI\": {\n        \"size\": 96,\n        \"population\": 14906\n    },\n    \"AQ\": {\n        \"size\": 13209000,\n        \"population\": 2700\n    },\n    \"AG\": {\n        \"size\": 442,\n        \"population\": 93659\n    },\n    \"AR\": {\n        \"size\": 2777409,\n        \"population\": 44272125\n    },\n    \"AM\": {\n        \"size\": 29743,\n        \"population\": 2936706\n    },\n    \"AW\": {\n        \"size\": 193,\n        \"population\": 104588\n    },\n    \"AU\": {\n        \"size\": 7682557,\n        \"population\": 24641662\n    },\n    \"AT\": {\n        \"size\": 83858,\n        \"population\": 8592400\n    },\n    \"AZ\": {\n        \"size\": 86530,\n        \"population\": 9923914\n    },\n    \"BS\": {\n        \"size\": 13962,\n        \"population\": 397164\n    },\n    \"BH\": {\n        \"size\": 694,\n        \"population\": 1637896\n    },\n    \"BD\": {\n        \"size\": 142615,\n        \"population\": 168065920\n    },\n    \"BB\": {\n        \"size\": 431,\n        \"population\": 289680\n    },\n    \"BY\": {\n        \"size\": 207600,\n        \"population\": 9608058\n    },\n    \"BE\": {\n        \"size\": 30518,\n        \"population\": 10449361\n    },\n    \"BZ\": {\n        \"size\": 22966,\n        \"population\": 340844\n    },\n    \"BJ\": {\n        \"size\": 112622,\n        \"population\": 11801595\n    },\n    \"BM\": {\n        \"size\": 53,\n        \"population\": 69839\n    },\n    \"BT\": {\n        \"size\": 46650,\n        \"population\": 817054\n    },\n    \"BO\": {\n        \"size\": 1098581,\n        \"population\": 10969646\n    },\n    \"BA\": {\n        \"size\": 51129,\n        \"population\": 3871643\n    },\n    \"BW\": {\n        \"size\": 581730,\n        \"population\": 2374636\n    },\n    \"BV\": {\n        \"size\": 49,\n        \"population\": 0\n    },\n    \"BR\": {\n        \"size\": 8544418,\n        \"population\": 212392717\n    },\n    \"VG\": {\n        \"size\": 151,\n        \"population\": 32206\n    },\n    \"BN\": {\n        \"size\": 5765,\n        \"population\": 434076\n    },\n    \"BG\": {\n        \"size\": 110994,\n        \"population\": 6924716\n    },\n    \"BF\": {\n        \"size\": 267950,\n        \"population\": 20321560\n    },\n    \"BI\": {\n        \"size\": 27834,\n        \"population\": 11575964\n    },\n    \"CV\": {\n        \"size\": 4033,\n        \"population\": 8000\n    },\n    \"KH\": {\n        \"size\": 181035,\n        \"population\": 16245729\n    },\n    \"CM\": {\n        \"size\": 475442,\n        \"population\": 25312993\n    },\n    \"CA\": {\n        \"size\": 9976137,\n        \"population\": 37742154\n    },\n    \"KY\": {\n        \"size\": 259,\n        \"population\": 56092\n    },\n    \"CF\": {\n        \"size\": 622436,\n        \"population\": 4825711\n    },\n    \"TD\": {\n        \"size\": 1284000,\n        \"population\": 15814345\n    },\n    \"CL\": {\n        \"size\": 755482,\n        \"population\": 17508260\n    },\n    \"CN\": {\n        \"size\": 9806391,\n        \"population\": 1439323776\n    },\n    \"CX\": {\n        \"size\": 135,\n        \"population\": 1502\n    },\n    \"CC\": {\n        \"size\": 14,\n        \"population\": 550\n    },\n    \"CO\": {\n        \"size\": 1141748,\n        \"population\": 49464683\n    },\n    \"KM\": {\n        \"size\": 1862,\n        \"population\": 850910\n    },\n    \"CG\": {\n        \"size\": 342000,\n        \"population\": 5542197\n    },\n    \"CD\": {\n        \"size\": 2344798,\n        \"population\": 86727573\n    },\n    \"CK\": {\n        \"size\": 237,\n        \"population\": 12400\n    },\n    \"CR\": {\n        \"size\": 51090,\n        \"population\": 4755234\n    },\n    \"CI\": {\n        \"size\": 322461,\n        \"population\": 25531083\n    },\n    \"HR\": {\n        \"size\": 56542,\n        \"population\": 4470534\n    },\n    \"CU\": {\n        \"size\": 114525,\n        \"population\": 11047251\n    },\n    \"CW\": {\n        \"size\": 444,\n        \"population\": 147695\n    },\n    \"CY\": {\n        \"size\": 9251,\n        \"population\": 1172458\n    },\n    \"CZ\": {\n        \"size\": 78866,\n        \"population\": 10627448\n    },\n    \"DK\": {\n        \"size\": 43093,\n        \"population\": 5569077\n    },\n    \"DJ\": {\n        \"size\": 23200,\n        \"population\": 985690\n    },\n    \"DM\": {\n        \"size\": 751,\n        \"population\": 73449\n    },\n    \"DO\": {\n        \"size\": 48734,\n        \"population\": 10349741\n    },\n    \"TP\": {\n        \"size\": 14604,\n        \"population\": 1201542\n    },\n    \"EC\": {\n        \"size\": 272046,\n        \"population\": 15654411\n    },\n    \"EG\": {\n        \"size\": 1001450,\n        \"population\": 101168745\n    },\n    \"SV\": {\n        \"size\": 21041,\n        \"population\": 6125512\n    },\n    \"GQ\": {\n        \"size\": 28051,\n        \"population\": 1360104\n    },\n    \"ER\": {\n        \"size\": 121100,\n        \"population\": 5309659\n    },\n    \"EE\": {\n        \"size\": 45226,\n        \"population\": 1257921\n    },\n    \"ET\": {\n        \"size\": 1127127,\n        \"population\": 110135635\n    },\n    \"FK\": {\n        \"size\": 16076,\n        \"population\": 2932\n    },\n    \"FO\": {\n        \"size\": 1414,\n        \"population\": 49947\n    },\n    \"FJ\": {\n        \"size\": 18274,\n        \"population\": 903207\n    },\n    \"FI\": {\n        \"size\": 338145,\n        \"population\": 5268799\n    },\n    \"FR\": {\n        \"size\": 547030,\n        \"population\": 65233271\n    },\n    \"GF\": {\n        \"size\": 83534,\n        \"population\": 253511\n    },\n    \"PF\": {\n        \"size\": 3894,\n        \"population\": 280026\n    },\n    \"TF\": {\n        \"size\": 7781,\n        \"population\": 120\n    },\n    \"GA\": {\n        \"size\": 267667,\n        \"population\": 2109099\n    },\n    \"GM\": {\n        \"size\": 10689,\n        \"population\": 2228075\n    },\n    \"GE\": {\n        \"size\": 69700,\n        \"population\": 4931226\n    },\n    \"DE\": {\n        \"size\": 357021,\n        \"population\": 82293457\n    },\n    \"GH\": {\n        \"size\": 238538,\n        \"population\": 30096970\n    },\n    \"GI\": {\n        \"size\": 7,\n        \"population\": 29185\n    },\n    \"GR\": {\n        \"size\": 131957,\n        \"population\": 10775557\n    },\n    \"GL\": {\n        \"size\": 2175600,\n        \"population\": 57728\n    },\n    \"GD\": {\n        \"size\": 345,\n        \"population\": 110152\n    },\n    \"GU\": {\n        \"size\": 545,\n        \"population\": 161001\n    },\n    \"GT\": {\n        \"size\": 108894,\n        \"population\": 14647083\n    },\n    \"GG\": {\n        \"size\": 91,\n        \"population\": 65849\n    },\n    \"GN\": {\n        \"size\": 245857,\n        \"population\": 13398180\n    },\n    \"GW\": {\n        \"size\": 36123,\n        \"population\": 1953723\n    },\n    \"GP\": {\n        \"size\": 28051,\n        \"population\": 1360104\n    },\n    \"GY\": {\n        \"size\": 215083,\n        \"population\": 735554\n    },\n    \"HT\": {\n        \"size\": 27748,\n        \"population\": 9996731\n    },\n    \"HN\": {\n        \"size\": 112088,\n        \"population\": 8598561\n    },\n    \"HK\": {\n        \"size\": 1085,\n        \"population\": 7141106\n    },\n    \"HU\": {\n        \"size\": 92966,\n        \"population\": 9919128\n    },\n    \"IS\": {\n        \"size\": 102928,\n        \"population\": 317351\n    },\n    \"IN\": {\n        \"size\": 3166944,\n        \"population\": 1380004385\n    },\n    \"ID\": {\n        \"size\": 1904443,\n        \"population\": 273523615\n    },\n    \"IR\": {\n        \"size\": 1648195,\n        \"population\": 82503583\n    },\n    \"IQ\": {\n        \"size\": 434128,\n        \"population\": 40412299\n    },\n    \"IE\": {\n        \"size\": 70273,\n        \"population\": 4832765\n    },\n    \"IL\": {\n        \"size\": 20991,\n        \"population\": 8583916\n    },\n    \"IT\": {\n        \"size\": 301323,\n        \"population\": 59290969\n    },\n    \"JM\": {\n        \"size\": 10991,\n        \"population\": 2930050\n    },\n    \"JP\": {\n        \"size\": 377812,\n        \"population\": 127185332\n    },\n    \"JE\": {\n        \"size\": 116,\n        \"population\": 96513\n    },\n    \"JO\": {\n        \"size\": 89342,\n        \"population\": 10069794\n    },\n    \"KZ\": {\n        \"size\": 2715900,\n        \"population\": 18157122\n    },\n    \"KE\": {\n        \"size\": 581787,\n        \"population\": 52214791\n    },\n    \"KI\": {\n        \"size\": 832,\n        \"population\": 104488\n    },\n    \"KP\": {\n        \"size\": 122762,\n        \"population\": 24983205\n    },\n    \"KR\": {\n        \"size\": 99268,\n        \"population\": 49115196\n    },\n    \"KV\": {\n        \"size\": 10908,\n        \"population\": 1859203\n    },\n    \"KW\": {\n        \"size\": 17818,\n        \"population\": 4248974\n    },\n    \"KG\": {\n        \"size\": 199900,\n        \"population\": 5664939\n    },\n    \"LA\": {\n        \"size\": 236800,\n        \"population\": 6911544\n    },\n    \"LV\": {\n        \"size\": 64598,\n        \"population\": 2165165\n    },\n    \"LB\": {\n        \"size\": 10452,\n        \"population\": 6065922\n    },\n    \"LS\": {\n        \"size\": 30355,\n        \"population\": 2292682\n    },\n    \"LR\": {\n        \"size\": 99065,\n        \"population\": 4977720\n    },\n    \"LY\": {\n        \"size\": 1777060,\n        \"population\": 6569864\n    },\n    \"LI\": {\n        \"size\": 160,\n        \"population\": 37313\n    },\n    \"LT\": {\n        \"size\": 65300,\n        \"population\": 2904391\n    },\n    \"LU\": {\n        \"size\": 2586,\n        \"population\": 520672\n    },\n    \"MO\": {\n        \"size\": 25,\n        \"population\": 592731\n    },\n    \"MK\": {\n        \"size\": 25433,\n        \"population\": 2091719\n    },\n    \"MG\": {\n        \"size\": 587041,\n        \"population\": 26969642\n    },\n    \"MW\": {\n        \"size\": 118480,\n        \"population\": 19718743\n    },\n    \"MY\": {\n        \"size\": 329758,\n        \"population\": 30513848\n    },\n    \"MV\": {\n        \"size\": 298,\n        \"population\": 393253\n    },\n    \"ML\": {\n        \"size\": 1240198,\n        \"population\": 19689140\n    },\n    \"MT\": {\n        \"size\": 315,\n        \"population\": 412655\n    },\n    \"IM\": {\n        \"size\": 572,\n        \"population\": 86866\n    },\n    \"MH\": {\n        \"size\": 181,\n        \"population\": 70983\n    },\n    \"MQ\": {\n        \"size\": 1128,\n        \"population\": 410508\n    },\n    \"MR\": {\n        \"size\": 1035000,\n        \"population\": 4661149\n    },\n    \"MU\": {\n        \"size\": 2040,\n        \"population\": 1271368\n    },\n    \"YT\": {\n        \"size\": 373,\n        \"population\": 266380\n    },\n    \"MX\": {\n        \"size\": 1967138,\n        \"population\": 130759074\n    },\n    \"FM\": {\n        \"size\": 721,\n        \"population\": 105681\n    },\n    \"MD\": {\n        \"size\": 33843,\n        \"population\": 3583288\n    },\n    \"MC\": {\n        \"size\": 2,\n        \"population\": 30508\n    },\n    \"MN\": {\n        \"size\": 1564160,\n        \"population\": 2992908\n    },\n    \"CS\": {\n        \"size\": 14026,\n        \"population\": 650036\n    },\n    \"MS\": {\n        \"size\": 102,\n        \"population\": 5215\n    },\n    \"MA\": {\n        \"size\": 6600000,\n        \"population\": 36635156\n    },\n    \"MZ\": {\n        \"size\": 799380,\n        \"population\": 31408823\n    },\n    \"MM\": {\n        \"size\": 676577,\n        \"population\": 56320206\n    },\n    \"NA\": {\n        \"size\": 825112,\n        \"population\": 2641996\n    },\n    \"NR\": {\n        \"size\": 21,\n        \"population\": 9488\n    },\n    \"NP\": {\n        \"size\": 147181,\n        \"population\": 31551305\n    },\n    \"NL\": {\n        \"size\": 41526,\n        \"population\": 16877351\n    },\n    \"AN\": {\n        \"size\": 800,\n        \"population\": 100\n    },\n    \"NC\": {\n        \"size\": 18736,\n        \"population\": 267840\n    },\n    \"NZ\": {\n        \"size\": 270534,\n        \"population\": 4401916\n    },\n    \"NI\": {\n        \"size\": 129454,\n        \"population\": 5848641\n    },\n    \"NE\": {\n        \"size\": 1186408,\n        \"population\": 23176691\n    },\n    \"NG\": {\n        \"size\": 923768,\n        \"population\": 200962417\n    },\n    \"NU\": {\n        \"size\": 259,\n        \"population\": 1190\n    },\n    \"NF\": {\n        \"size\": 35,\n        \"population\": 2210\n    },\n    \"MP\": {\n        \"size\": 477,\n        \"population\": 51483\n    },\n    \"NO\": {\n        \"size\": 323759,\n        \"population\": 5147792\n    },\n    \"OM\": {\n        \"size\": 309500,\n        \"population\": 5001875\n    },\n    \"PK\": {\n        \"size\": 880254,\n        \"population\": 200813818\n    },\n    \"PW\": {\n        \"size\": 491,\n        \"population\": 21186\n    },\n    \"PS\": {\n        \"size\": 6242,\n        \"population\": 5186790\n    },\n    \"PA\": {\n        \"size\": 77082,\n        \"population\": 3608431\n    },\n    \"PG\": {\n        \"size\": 462840,\n        \"population\": 6552730\n    },\n    \"PY\": {\n        \"size\": 406752,\n        \"population\": 6703860\n    },\n    \"PE\": {\n        \"size\": 1285216,\n        \"population\": 30147935\n    },\n    \"PH\": {\n        \"size\": 300000,\n        \"population\": 106512074\n    },\n    \"PN\": {\n        \"size\": 47,\n        \"population\": 54\n    },\n    \"PL\": {\n        \"size\": 312685,\n        \"population\": 38346279\n    },\n    \"PT\": {\n        \"size\": 92391,\n        \"population\": 10813834\n    },\n    \"PR\": {\n        \"size\": 9104,\n        \"population\": 3620897\n    },\n    \"QA\": {\n        \"size\": 11521,\n        \"population\": 2743901\n    },\n    \"RE\": {\n        \"size\": 2547,\n        \"population\": 889918\n    },\n    \"RO\": {\n        \"size\": 238391,\n        \"population\": 21729871\n    },\n    \"RU\": {\n        \"size\": 16894741,\n        \"population\": 143964709\n    },\n    \"RW\": {\n        \"size\": 26338,\n        \"population\": 12794412\n    },\n    \"EH\": {\n        \"size\": 266000,\n        \"population\": 582478\n    },\n    \"BL\": {\n        \"size\": 21,\n        \"population\": 7267\n    },\n    \"SH\": {\n        \"size\": 410,\n        \"population\": 4096\n    },\n    \"KN\": {\n        \"size\": 267,\n        \"population\": 51538\n    },\n    \"LC\": {\n        \"size\": 616,\n        \"population\": 163362\n    },\n    \"MF\": {\n        \"size\": 37,\n        \"population\": 31530\n    },\n    \"PM\": {\n        \"size\": 242,\n        \"population\": 5716\n    },\n    \"VC\": {\n        \"size\": 392,\n        \"population\": 102918\n    },\n    \"WS\": {\n        \"size\": 2785,\n        \"population\": 196628\n    },\n    \"SM\": {\n        \"size\": 61,\n        \"population\": 32742\n    },\n    \"ST\": {\n        \"size\": 1001,\n        \"population\": 213379\n    },\n    \"SA\": {\n        \"size\": 2149690,\n        \"population\": 34140662\n    },\n    \"SN\": {\n        \"size\": 196722,\n        \"population\": 16743859\n    },\n    \"RS\": {\n        \"size\": 77474,\n        \"population\": 7209764\n    },\n    \"SC\": {\n        \"size\": 455,\n        \"population\": 95702\n    },\n    \"SL\": {\n        \"size\": 71740,\n        \"population\": 7883123\n    },\n    \"SG\": {\n        \"size\": 683,\n        \"population\": 5674472\n    },\n    \"SK\": {\n        \"size\": 49034,\n        \"population\": 5492677\n    },\n    \"SI\": {\n        \"size\": 20273,\n        \"population\": 1988292\n    },\n    \"SB\": {\n        \"size\": 28400,\n        \"population\": 609883\n    },\n    \"SO\": {\n        \"size\": 637657,\n        \"population\": 15636171\n    },\n    \"ZA\": {\n        \"size\": 1219090,\n        \"population\": 58065097\n    },\n    \"SS\": {\n        \"size\": 619745,\n        \"population\": 12530717\n    },\n    \"ES\": {\n        \"size\": 504842,\n        \"population\": 47737941\n    },\n    \"LK\": {\n        \"size\": 65610,\n        \"population\": 22053488\n    },\n    \"SD\": {\n        \"size\": 2505810,\n        \"population\": 36729501\n    },\n    \"SR\": {\n        \"size\": 163820,\n        \"population\": 573311\n    },\n    \"SJ\": {\n        \"size\": 61606,\n        \"population\": 1872\n    },\n    \"SZ\": {\n        \"size\": 17363,\n        \"population\": 1451428\n    },\n    \"SE\": {\n        \"size\": 449965,\n        \"population\": 9723809\n    },\n    \"CH\": {\n        \"size\": 41285,\n        \"population\": 8061516\n    },\n    \"SY\": {\n        \"size\": 185180,\n        \"population\": 18499181\n    },\n    \"TW\": {\n        \"size\": 36175,\n        \"population\": 23415126\n    },\n    \"TJ\": {\n        \"size\": 143100,\n        \"population\": 8191958\n    },\n    \"TZ\": {\n        \"size\": 945088,\n        \"population\": 52482726\n    },\n    \"TH\": {\n        \"size\": 513115,\n        \"population\": 67976405\n    },\n    \"TG\": {\n        \"size\": 56785,\n        \"population\": 7756937\n    },\n    \"TK\": {\n        \"size\": 10,\n        \"population\": 1337\n    },\n    \"TO\": {\n        \"size\": 651,\n        \"population\": 106440\n    },\n    \"TT\": {\n        \"size\": 5128,\n        \"population\": 1223916\n    },\n    \"TN\": {\n        \"size\": 163610,\n        \"population\": 11134588\n    },\n    \"TR\": {\n        \"size\": 773473,\n        \"population\": 81619392\n    },\n    \"TM\": {\n        \"size\": 488100,\n        \"population\": 5231422\n    },\n    \"TC\": {\n        \"size\": 497,\n        \"population\": 49070\n    },\n    \"TV\": {\n        \"size\": 26,\n        \"population\": 10782\n    },\n    \"UG\": {\n        \"size\": 242554,\n        \"population\": 38319241\n    },\n    \"UA\": {\n        \"size\": 603628,\n        \"population\": 44291413\n    },\n    \"AE\": {\n        \"size\": 77700,\n        \"population\": 9682088\n    },\n    \"UK\": {\n        \"size\": 244140,\n        \"population\": 66573504\n    },\n    \"GB\": {\n        \"size\": 244140,\n        \"population\": 66573504\n    },\n    \"US\": {\n        \"size\": 9629047,\n        \"population\": 331002651\n    },\n    \"UY\": {\n        \"size\": 175016,\n        \"population\": 3332972\n    },\n    \"UZ\": {\n        \"size\": 447400,\n        \"population\": 29199942\n    },\n    \"VU\": {\n        \"size\": 12190,\n        \"population\": 266937\n    },\n    \"VA\": {\n        \"size\": 1,\n        \"population\": 842\n    },\n    \"VE\": {\n        \"size\": 916445,\n        \"population\": 26457369\n    },\n    \"VN\": {\n        \"size\": 332378,\n        \"population\": 96491146\n    },\n    \"VI\": {\n        \"size\": 352,\n        \"population\": 104170\n    },\n    \"WF\": {\n        \"size\": 274,\n        \"population\": 15561\n    },\n    \"YE\": {\n        \"size\": 528076,\n        \"population\": 29579986\n    },\n    \"ZM\": {\n        \"size\": 752614,\n        \"population\": 18137369\n    },\n    \"ZW\": {\n        \"size\": 390784,\n        \"population\": 17297495\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { Country, DataPoint, DateDataPoints, Info } from './api/Country';\nimport { isNumber } from 'util';\nimport { CoronaChart, Dataset } from './Chart';\nimport Select from '@material-ui/core/Select';\nimport { MenuItem, FormControl, InputLabel, Container, AppBar, Toolbar, Checkbox, FormControlLabel, Box } from '@material-ui/core';\nimport countryCodes from './countryCodes.json'\nimport { countryPopulations } from './CountryPopulations'\n\ninterface CountryItem {\n  code: string,\n  name: string\n}\n\ninterface AppState {\n  country: Country[],\n  isNormalized: boolean,\n  enableMultiple: boolean\n}\n\ninterface DateValues {\n  date: string,\n  cases: number,\n  cumulativeCases: number,\n  rollingCases: number,\n  deaths: number,\n  rollingDeaths: number,\n  cumulativeDeaths: number,\n}\n\nconst emptyDataPoint: DataPoint = {\n  new_daily_cases: 0,\n  new_daily_deaths: 0,\n  total_cases: 0,\n  total_recoveries: 0,\n  total_deaths: 0\n}\n\ninterface Color {\n  cases: string,\n  deaths: string\n}\n\nconst colors: Color[] = [\n  {\n    cases: '17,192,192',\n    deaths: '192,75,92'\n  },\n  {\n    cases: '245,130,48',\n    deaths: '128,0,0'\n  },\n  {\n    cases: '150,210,0',\n    deaths: '128,0,0'\n  },\n  {\n    cases: '10,90,188',\n    deaths: '0,0,128'\n  },\n  {\n    cases: '200,150,205',\n    deaths: '128,0,0'\n  },\n  {\n    cases: '128,128,0',\n    deaths: '128,0,0'\n  },\n  {\n    cases: '250,60,100',\n    deaths: '128,0,0'\n  }\n]\n\ninterface DataChart {\n  title: string,\n  datasets: Dataset[]\n}\n\nclass App extends Component<any, AppState> {\n  state: AppState = {\n    country: [],\n    isNormalized: false,\n    enableMultiple: false\n  };\n\n  constructor(props: any) {\n    super(props)\n  }\n\n  getCountryCodes(): string[] {\n    return this.props.match.params.countryCodes.split(',')\n  }\n\n  load() {\n    this.loadCountries(this.getCountryCodes())\n  }\n\n  loadCountries(countryCodes: string[]) {\n    let urls = countryCodes.map(cc => `https://api.thevirustracker.com/free-api?countryTimeline=${cc}`)\n\n    Promise.all(urls.map(u => fetch(u)))\n      .then(responses =>\n        Promise.all(responses.map(res => res.json()))\n          .then((data: Country[]) => this.setState({ ...this.state, country: data })))\n  }\n\n  componentDidMount() {\n    let countryCodes = this.getCountryCodes()\n    this.setState({ ...this.state, enableMultiple: countryCodes.length > 1 })\n    this.loadCountries(countryCodes)\n  }\n\n  private average(xs: number[]) {\n    return xs.filter(x => isNumber(x)).reduce((a, b) => a + b) / xs.length\n  }\n\n  private normalize(countryCode: string, value: number): number {\n    if (this.state.isNormalized) {\n      let population = countryPopulations[countryCode].population\n      return 1e6 * value / population\n    } else {\n      return value\n    }\n  }\n\n  private dateValues(countryCode: string, dates: string[], dateDataPoints: DateDataPoints): DateValues[] {\n    let roll = 7\n\n    return dates.map((date, i) => {\n      let day: DataPoint = dateDataPoints[date] || emptyDataPoint\n\n      let rollingDays = dates.slice(Math.max(i - (roll / 2), 0), i + (roll / 2))\n\n      let rolling = (f: (t: DataPoint) => number) => {\n        let rollingValues = rollingDays.map(d => f(dateDataPoints[d] || emptyDataPoint))\n        return Math.round(this.average(rollingValues))\n      }\n\n      return ({\n        date: date,\n        cases: this.normalize(countryCode, day.new_daily_cases),\n        rollingCases: this.normalize(countryCode, rolling(d => d.new_daily_cases)),\n        cumulativeCases: this.normalize(countryCode, day.total_cases),\n        deaths: this.normalize(countryCode, day.new_daily_deaths),\n        rollingDeaths: this.normalize(countryCode, rolling(d => d.new_daily_deaths)),\n        cumulativeDeaths: this.normalize(countryCode, day.total_deaths)\n      })\n    })\n  }\n\n  private getNormalizeSuffix() {\n    return this.state.isNormalized? \" Per 1 Million Population\" : \"\"\n  }\n\n  private createDataCharts(dates: string[], timelineitem: DateDataPoints, countryInfo: Info, color: Color): DataChart[] {\n    let dvs = this.dateValues(countryInfo.code, dates, timelineitem)\n    \n    return [\n      {\n        title: `${countryInfo.title}: New Cases and Deaths${this.getNormalizeSuffix()}`,\n        datasets:\n          [\n            {\n              title: `New Cases`,\n              color: `rgba(${color.cases},0.2)`,\n              values: dvs.map(dv => dv.cases)\n            },\n            {\n              title: `New Cases (rolling avg)`,\n              color: `rgba(${color.cases},1)`,\n              values: dvs.map(dv => dv.rollingCases)\n            },\n            {\n              title: `New Deaths`,\n              color: `rgba(${color.deaths},0.2)`,\n              values: dvs.map(dv => dv.deaths)\n            },\n            {\n              title: `New Deaths (rolling avg)`,\n              color: `rgba(${color.deaths},1)`,\n              values: dvs.map(dv => dv.rollingDeaths)\n            }\n          ]\n      },\n      {\n        title: `${countryInfo.title}: Total Cases and Deaths${this.getNormalizeSuffix()}`,\n        datasets: [\n          {\n            title: `Total Cases`,\n            color: `rgba(${color.cases},1)`,\n            values: dvs.map(dv => dv.cumulativeCases)\n          },\n          {\n            title: `Total Deaths`,\n            color: `rgba(${color.deaths},1)`,\n            values: dvs.map(dv => dv.cumulativeDeaths)\n          }\n        ]\n      }\n    ]\n  }\n\n  private createComparisonDataCharts(dates: string[], timelineitem: DateDataPoints, countryInfo: Info, color: Color): DataChart[] {\n    let dvs = this.dateValues(countryInfo.code, dates, timelineitem)\n\n    return [\n      {\n        title: `New Cases (rolling avg)${this.getNormalizeSuffix()}`,\n        datasets: [\n          {\n            title: `${countryInfo.title}`,\n            color: `rgba(${color.cases},1)`,\n            values: dvs.map(dv => dv.rollingCases)\n          }\n        ]\n      },\n      {\n        title: `New Deaths${this.getNormalizeSuffix()}`,\n        datasets: [\n          {\n            title: `${countryInfo.title}`,\n            color: `rgba(${color.cases},1)`,\n            values: dvs.map(dv => dv.rollingDeaths)\n          }\n        ]\n      },\n      {\n        title: `Total Cases${this.getNormalizeSuffix()}`,\n        datasets: [\n          {\n            title: `${countryInfo.title}`,\n            color: `rgba(${color.cases},1)`,\n            values: dvs.map(dv => dv.cumulativeCases)\n          }\n        ]\n      },\n      {\n        title: `Total Deaths${this.getNormalizeSuffix()}`,\n        datasets: [\n          {\n            title: `${countryInfo.title}`,\n            color: `rgba(${color.cases},1)`,\n            values: dvs.map(dv => dv.cumulativeDeaths)\n          }\n        ]\n      }\n    ]\n  }\n\n  private toDateKey(d: Date): string { // TODO worst hack ever. take care of dates earlier when fetching data instead\n    let day: number = d.getDate()\n    let dayString = (day < 10) ? '0' + day : day\n    return `${d.getMonth() + 1}/${dayString}/${d.getFullYear().toString().slice(2)}`\n  }\n\n  render() {\n    if (this.state.country.length === 0) return <div />\n\n    let allDates: Date[] = this.state.country\n      .map(c => c.timelineitems[0])\n      .map(t => Object.keys(t).filter(d => d !== 'stat')\n        .map((d: string) => new Date(d))).flat()\n    let dates: string[] = Array.from(new Set(allDates.sort((a, b) => a.getTime() - b.getTime()).map(d => this.toDateKey(d))))\n\n    let allSets = this.state.country.map((c, i) => {\n      return this.state.enableMultiple\n        ? this.createComparisonDataCharts(dates, c.timelineitems[0], c.countrytimelinedata[0].info, colors[i % colors.length])\n        : this.createDataCharts(dates, c.timelineitems[0], c.countrytimelinedata[0].info, colors[i % colors.length])\n    })\n\n    let numberOfCharts: number = Math.min(...allSets.map(s => s.length))\n\n    return (\n      <Container>\n        <AppBar color=\"default\" position=\"sticky\">\n          <Toolbar>\n            <Box mr={4}>\n              <FormControl>\n                <InputLabel id=\"select-country\">Country</InputLabel>\n                <Select\n                  multiple={this.state.enableMultiple}\n                  labelId=\"select-country\"\n                  id=\"select-country\"\n                  value={this.state.enableMultiple ? this.getCountryCodes() : this.getCountryCodes()[0]}\n                  onChange={(e) => {\n                    if (this.state.enableMultiple) {\n                      let countryCodes = e.target.value as string[]\n                      if (countryCodes.length > 0) {\n                        this.props.history.push('/country/' + countryCodes.join(','));\n                      }\n                      this.loadCountries(countryCodes)\n                    } else {\n                      let countryCode = e.target.value as string\n                      this.props.history.push('/country/' + countryCode);\n                      this.loadCountries([countryCode])\n                    }\n                  }}>\n                  {countryCodes.map(c =>\n                    <MenuItem value={c.code}>{c.name}</MenuItem>\n                  )}\n                </Select>\n              </FormControl>\n            </Box>\n            <Box>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={this.state.isNormalized}\n                    onChange={(e) => this.setState({ ...this.state, isNormalized: e.target.checked })}\n                    name=\"normalized\"\n                    color=\"primary\"\n                  />}\n                label=\"Per 1M Population\"\n              />\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={this.state.enableMultiple}\n                    onChange={(e) => {\n                      let enableMultiple = e.target.checked\n                      this.setState({ ...this.state, enableMultiple: enableMultiple })\n                      let countryCodes = enableMultiple ? this.getCountryCodes() : [this.getCountryCodes()[0]]\n                      this.loadCountries(countryCodes)\n                    }}\n                    name=\"enableMultiple\"\n                    color=\"primary\"\n                  />}\n                label=\"Comparison Mode\"\n              />\n            </Box>\n          </Toolbar>\n        </AppBar>\n        {Array.from(Array(numberOfCharts).keys()).map(i =>\n          <CoronaChart title={allSets[0][i].title} labels={dates} datasets={allSets.map(s => s[i].datasets).flat()} />\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { Router, Route } from 'react-router'\nimport { createBrowserHistory } from 'history'\nimport { HashRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Route path=\"/country/:countryCodes\" component={App}></Route>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}